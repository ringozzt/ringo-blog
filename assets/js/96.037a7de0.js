(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{648:function(t,e,a){"use strict";a.r(e);var s=a(13),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"webpack-基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-基础"}},[t._v("#")]),t._v(" Webpack 基础")]),t._v(" "),a("p",[t._v("首先，webpack 是一款打包工具，我们平时用的 Vue-CLI，create-React-App 等都是基于 Webpack 进行配置的脚手架。")]),t._v(" "),a("h2",{attrs:{id:"webpack-config-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-config-js"}},[t._v("#")]),t._v(" webpack.config.js")]),t._v(" "),a("p",[t._v("存放 webpack 配置的说明文件，以下我们讨论的内容多数是写在这里面的。")]),t._v(" "),a("h2",{attrs:{id:"module、chunk、bundle"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#module、chunk、bundle"}},[t._v("#")]),t._v(" module、chunk、bundle")]),t._v(" "),a("p",[t._v("对于初学者来说，这三个概念还是挺迷惑的。通过这张图可以看出：")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://cdn.jsdelivr.net/gh/ringozzt/myPics@main/webpack.png"}}),t._v(" "),a("p",[a("code",[t._v("webpack")]),t._v("这个打包器帮我们把各种乱七八糟的资源输出成"),a("strong",[t._v("浏览器能识别的资源")])]),t._v(" "),a("h3",{attrs:{id:"module"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#module"}},[t._v("#")]),t._v(" module")]),t._v(" "),a("p",[t._v("module 就是左边的那些资源")]),t._v(" "),a("h3",{attrs:{id:"bundle"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bundle"}},[t._v("#")]),t._v(" bundle")]),t._v(" "),a("p",[t._v("右边的这一整块就是打包产物 bundle")]),t._v(" "),a("h3",{attrs:{id:"chunk"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chunk"}},[t._v("#")]),t._v(" chunk")]),t._v(" "),a("p",[t._v("对于打包产物 bundle， 有些情况下，我们觉得太大了。 为了优化性能，比如快速打开首屏，利用缓存等，我们需要对 bundle 进行以下拆分，对于拆分出来的东西，我们叫它 chunk。")]),t._v(" "),a("h2",{attrs:{id:"loader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#loader"}},[t._v("#")]),t._v(" Loader")]),t._v(" "),a("p",[t._v("webpack 只能理解 JavaScript 和 JSON 文件，这是 webpack 开箱可用的自带能力。")]),t._v(" "),a("p",[a("strong",[t._v("loader")]),t._v(" 让 webpack 能够去处理其他类型的文件，并将它们转换为有效 "),a("a",{attrs:{href:"https://webpack.docschina.org/concepts/modules",target:"_blank",rel:"noopener noreferrer"}},[t._v("模块"),a("OutboundLink")],1),t._v("，以供应用程序使用，以及被添加到依赖图中。")]),t._v(" "),a("h3",{attrs:{id:"常见的-loader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见的-loader"}},[t._v("#")]),t._v(" 常见的 Loader：")]),t._v(" "),a("h4",{attrs:{id:"less-loader、sass-loader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#less-loader、sass-loader"}},[t._v("#")]),t._v(" less-loader、sass-loader")]),t._v(" "),a("p",[t._v("Less-loader 的作用就是将 less 代码转译为浏览器可以识别的 CSS 代码")]),t._v(" "),a("h4",{attrs:{id:"css-loader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css-loader"}},[t._v("#")]),t._v(" css-loader")]),t._v(" "),a("p",[t._v("主要是解析 css 文件中的@import 和 url 语句，处理 css-modules，并将结果作为一个 js 模块返回")]),t._v(" "),a("h4",{attrs:{id:"style-loader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#style-loader"}},[t._v("#")]),t._v(" style-loader")]),t._v(" "),a("p",[t._v("经过 css-loader 的转译，我们已经得到了完整的 css 样式代码块，style-loader 的作用就是将包含 css 样式的 js 模块以 style 标签的方式插入 DOM 树中。")]),t._v(" "),a("h4",{attrs:{id:"postcss-loader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#postcss-loader"}},[t._v("#")]),t._v(" postcss-loader")]),t._v(" "),a("p",[t._v("PostCSS 本身是一个功能比较单一的工具。它提供了一种方式用 JavaScript 代码来处理 CSS。它负责把 CSS 代码解析成抽象语法树结构（Abstract Syntax Tree，AST），再交由插件来进行处理。PostCSS 的强大之处在于其不断发展的插件体系。")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/postcss/autoprefixer",target:"_blank",rel:"noopener noreferrer"}},[t._v("autoprefixer (opens new window)"),a("OutboundLink")],1),t._v("给 css 加前缀")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/jonathantneal/precss",target:"_blank",rel:"noopener noreferrer"}},[t._v("precss (opens new window)"),a("OutboundLink")],1),t._v("提供类似 sass 语法，告别 sass 包")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/MoOx/postcss-cssnext",target:"_blank",rel:"noopener noreferrer"}},[t._v("cssnext (opens new window)"),a("OutboundLink")],1),t._v("将未来 CSS 特性编译为现今支持的特性")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/songsiqi/px2rem-postcss",target:"_blank",rel:"noopener noreferrer"}},[t._v("px2rem-postcss (opens new window)"),a("OutboundLink")],1),t._v("将 px 转为 rem 工具。"),a("code",[t._v("移动端强烈推荐")])])]),t._v(" "),a("h4",{attrs:{id:"babel-loader-重要"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#babel-loader-重要"}},[t._v("#")]),t._v(" babel-loader（重要）")]),t._v(" "),a("p",[t._v("将 ES6+ 语法转换为 ES5 语法")]),t._v(" "),a("p",[a("strong",[t._v("安装")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("cnpm i babel"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("loader @babel"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("core @babel"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("preset"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("env "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("D")]),t._v("\n")])])]),a("ul",[a("li",[t._v("babel-loader 这是使 babel 和 webpack 协同工作的模块")]),t._v(" "),a("li",[t._v("@bable/core 这是 babel 编译器核心模块")]),t._v(" "),a("li",[t._v("@babel/preset-env 这是 babel 官方推荐的预置器，可根据用户的环境自动添加所需的插件和补丁来编译 Es6 代码")])]),t._v(" "),a("h4",{attrs:{id:"swc-loader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#swc-loader"}},[t._v("#")]),t._v(" swc-loader")]),t._v(" "),a("p",[a("code",[t._v("rust")]),t._v("的出现让前端刮起了一阵重写工具风，用 rust 重构的 babel 就是 swc，它的性能很夸张，来到了毫秒级。感兴趣的同学可以看这两篇，这里就不展开了 "),a("a",{attrs:{href:"https://juejin.cn/post/7034316603890237477",target:"_blank",rel:"noopener noreferrer"}},[t._v("swc 入门"),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{href:"https://juejin.cn/post/7033196853218770980",target:"_blank",rel:"noopener noreferrer"}},[t._v("rust 重构"),a("OutboundLink")],1)]),t._v(" "),a("h4",{attrs:{id:"file-loader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#file-loader"}},[t._v("#")]),t._v(" file-loader")]),t._v(" "),a("p",[t._v("用于处理文件类型资源，如"),a("code",[t._v("jpg")]),t._v("，"),a("code",[t._v("png")]),t._v("等图片。返回能直接访问的 URL。")]),t._v(" "),a("h4",{attrs:{id:"url-loader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#url-loader"}},[t._v("#")]),t._v(" url-loader")]),t._v(" "),a("p",[a("code",[t._v("url-loader")]),t._v("也是处理图片类型资源，只不过它与"),a("code",[t._v("file-loader")]),t._v("有一点不同，"),a("code",[t._v("url-loader")]),t._v("可以设置一个根据图片大小进行不同的操作，如果该图片大小大于指定的大小，则将图片进行打包资源，否则将图片转换为"),a("code",[t._v("base64")]),t._v("字符串合并到"),a("code",[t._v("js")]),t._v("文件里")]),t._v(" "),a("h2",{attrs:{id:"mode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mode"}},[t._v("#")]),t._v(" Mode")]),t._v(" "),a("p",[t._v("通过选择 "),a("code",[t._v("development")]),t._v(", "),a("code",[t._v("production")]),t._v(" 或 "),a("code",[t._v("none")]),t._v(" 之中的一个，来设置 "),a("code",[t._v("mode")]),t._v(" 参数，你可以启用 webpack 内置在相应环境下的优化。其默认值为 "),a("code",[t._v("production")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("mode")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'production'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("想要了解更多，请查阅 "),a("a",{attrs:{href:"https://webpack.docschina.org/configuration/mode",target:"_blank",rel:"noopener noreferrer"}},[t._v("mode 配置"),a("OutboundLink")],1),t._v("，这里有具体每个值相应的优化行为。")]),t._v(" "),a("p",[t._v("支持以下字符串值：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("选项")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("development")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("会将 "),a("code",[t._v("DefinePlugin")]),t._v(" 中 "),a("code",[t._v("process.env.NODE_ENV")]),t._v(" 的值设置为 "),a("code",[t._v("development")]),t._v(". 为模块和 chunk 启用有效的名。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("production")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("会将 "),a("code",[t._v("DefinePlugin")]),t._v(" 中 "),a("code",[t._v("process.env.NODE_ENV")]),t._v(" 的值设置为 "),a("code",[t._v("production")]),t._v("。为模块和 chunk 启用确定性的混淆名称，"),a("code",[t._v("FlagDependencyUsagePlugin")]),t._v("，"),a("code",[t._v("FlagIncludedChunksPlugin")]),t._v("，"),a("code",[t._v("ModuleConcatenationPlugin")]),t._v("，"),a("code",[t._v("NoEmitOnErrorsPlugin")]),t._v(" 和 "),a("code",[t._v("TerserPlugin")]),t._v(" 。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("none")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("不使用任何默认优化选项")])])])]),t._v(" "),a("p",[t._v("如果没有设置，webpack 会给 "),a("code",[t._v("mode")]),t._v(" 的默认值设置为 "),a("code",[t._v("production")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"plugin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#plugin"}},[t._v("#")]),t._v(" Plugin")]),t._v(" "),a("h3",{attrs:{id:"常用的-plugin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用的-plugin"}},[t._v("#")]),t._v(" 常用的 plugin：")]),t._v(" "),a("h4",{attrs:{id:"webpack-bundle-analyzer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-bundle-analyzer"}},[t._v("#")]),t._v(" webpack-bundle-analyzer")]),t._v(" "),a("p",[t._v("webpack bundle 文件去重，对 bundle 文件定性分析的工具，能发现问题，能看出优化效果、能以图形化的方式展示 bundle 中所有的模块的构成的各构成的大小。")]),t._v(" "),a("h4",{attrs:{id:"commonschunkplugin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commonschunkplugin"}},[t._v("#")]),t._v(" CommonsChunkPlugin")]),t._v(" "),a("p",[t._v("对通用模块进行提取，自动提取所有的 node_modules 或者引用次数两次以上的模块")]),t._v(" "),a("h4",{attrs:{id:"html-webpack-plugin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#html-webpack-plugin"}},[t._v("#")]),t._v(" html-webpack-plugin")]),t._v(" "),a("p",[t._v("将一个页面模板打包到 dist 目录下，默认都是自动引入 js or css")]),t._v(" "),a("h4",{attrs:{id:"clean-webpack-plugin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#clean-webpack-plugin"}},[t._v("#")]),t._v(" clean-webpack-plugin")]),t._v(" "),a("p",[t._v("用于每次打包 dist 目录删除")]),t._v(" "),a("h4",{attrs:{id:"purge-webpack-plugin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#purge-webpack-plugin"}},[t._v("#")]),t._v(" purge-webpack-plugin")]),t._v(" "),a("p",[t._v("用于删除未使用到的 CSS 样式（CSS tree-shaking）")]),t._v(" "),a("h4",{attrs:{id:"extract-text-webpack-plugin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extract-text-webpack-plugin"}},[t._v("#")]),t._v(" extract-text-webpack-plugin")]),t._v(" "),a("p",[t._v("将"),a("code",[t._v("css")]),t._v("样式从"),a("code",[t._v("js")]),t._v("文件中提取出来最终合成一个"),a("code",[t._v("css")]),t._v("文件，该插件只支持"),a("code",[t._v("webpack4")]),t._v("之前的版本，如果你当前是"),a("code",[t._v("webpack4")]),t._v("及以上版本那么就会报错。")]),t._v(" "),a("h4",{attrs:{id:"mini-css-extract-plugin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mini-css-extract-plugin"}},[t._v("#")]),t._v(" mini-css-extract-plugin")]),t._v(" "),a("p",[t._v("该插件与上面的"),a("code",[t._v("exract-text-webpack-plugin")]),t._v("的一样，都是将 css 样式提取出来, 唯一就是用法不同，本插件的"),a("code",[t._v("webpack4+")]),t._v("推荐使用")]),t._v(" "),a("h4",{attrs:{id:"uglifyjs-webpack-plugin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uglifyjs-webpack-plugin"}},[t._v("#")]),t._v(" uglifyjs-webpack-plugin")]),t._v(" "),a("p",[t._v("用于压缩丑化"),a("code",[t._v("js")]),t._v("文件，针对"),a("code",[t._v("webpack4")]),t._v("版本以上。")]),t._v(" "),a("h4",{attrs:{id:"splitchunksplugin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splitchunksplugin"}},[t._v("#")]),t._v(" SplitChunksPlugin")]),t._v(" "),a("p",[t._v("可以看这篇，传送门 "),a("a",{attrs:{href:"https://juejin.cn/post/6844903680307625997",target:"_blank",rel:"noopener noreferrer"}},[t._v("chunk 全解"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"tree-shaking"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tree-shaking"}},[t._v("#")]),t._v(" Tree-shaking")]),t._v(" "),a("p",[t._v("Tree-Shaking 是一种基于 ES Module 规范的 Dead Code Elimination 技术，它会在运行过程中静态分析模块之间的导入导出，确定 ESM 模块中哪些导出值未曾其它模块使用，并将其删除，以此实现打包产物的优化。")]),t._v(" "),a("p",[t._v("Tree Shaking 较早前由 Rich Harris 在 Rollup 中率先实现，Webpack 自 2.0 版本开始接入，至今已经成为一种应用广泛的性能优化手段。")]),t._v(" "),a("p",[a("strong",[t._v("webpack5 已经自带了这个功能了，当打包环境为"),a("code",[t._v("production")]),t._v("时，默认开启 tree-shaking 功能。")])]),t._v(" "),a("h3",{attrs:{id:"具体方案有两种"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#具体方案有两种"}},[t._v("#")]),t._v(" 具体方案有两种：")]),t._v(" "),a("ul",[a("li",[t._v("usedExports：通过标记某些函数是否被使用过，之后通过 terser 来压缩\n"),a("ul",[a("li",[t._v("usedExports 设置为 true 时，可删除的代码块会有一段注释：unused harmony export mul，就是标记这段代码未使用，那么 Terser 就会在优化时删除这段代码。")])])]),t._v(" "),a("li",[t._v("sideEffects：跳过整个模块/文件，直接查看跳过该文件是否导致副作用\n"),a("ul",[a("li",[t._v("用于告知 webpack compiler 哪些模块是有副作用的")]),t._v(" "),a("li",[t._v("配置为 false，代表此模块无副作用，可以使用 usedExports 删除未使用到的 exports")]),t._v(" "),a("li",[t._v("模块导入后是否被使用、未使用到的直接删除")])])])]),t._v(" "),a("h3",{attrs:{id:"在生产环境中-可以这样配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在生产环境中-可以这样配置"}},[t._v("#")]),t._v(" 在生产环境中，可以这样配置")]),t._v(" "),a("ul",[a("li",[t._v("optimization 中配置 usedExports 为 true，来帮助 terser 进行优化")]),t._v(" "),a("li",[t._v("在 package.json 中配置 sideEffects 为 true，直接帮助模块进行优化")])]),t._v(" "),a("h2",{attrs:{id:"hmr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hmr"}},[t._v("#")]),t._v(" HMR")]),t._v(" "),a("h3",{attrs:{id:"webpack-dev-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-dev-server"}},[t._v("#")]),t._v(" webpack-dev-server")]),t._v(" "),a("p",[t._v("webpack-dev-server 是一个封装好的 webpack 开发服务器，底层使用 express。通常用在开发环境的 webpack 打包，它有以下这些作用：")]),t._v(" "),a("ol",[a("li",[t._v("读取 webpack.config.js 并使用 webpack 进行编译")]),t._v(" "),a("li",[a("strong",[t._v("默认集成一些第三方插件并可供配置，都在 webpack.config.js 下的"),a("code",[t._v("devServer")]),t._v("节点下（本节重点）")])]),t._v(" "),a("li",[t._v("开启一个 websocket 以实现热更新\n"),a("ul",[a("li",[t._v("基于"),a("a",{attrs:{href:"https://github.com/webpack/webpack-dev-middleware",target:"_blank",rel:"noopener noreferrer"}},[t._v("webpack-dev-middleware "),a("OutboundLink")],1),t._v("实现")]),t._v(" "),a("li",[t._v("编译输出放到内存中(memory-fs)，不会生成真实的文件")])])]),t._v(" "),a("li",[t._v("开启本地 express 服务器以实现网址预览")])]),t._v(" "),a("blockquote",[a("p",[t._v("webpack 打包和 webpack-dev-server 开启服务的区别:webpack 输出真实的文件，而 webpack-dev-server 只将 bundle 存放到内存中，不输出真实的文件")])]),t._v(" "),a("h3",{attrs:{id:"devserver-配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#devserver-配置"}},[t._v("#")]),t._v(" devServer 配置")]),t._v(" "),a("p",[t._v("webpack 的 devServer 配置基于"),a("a",{attrs:{href:"https://github.com/webpack/webpack-dev-server",target:"_blank",rel:"noopener noreferrer"}},[t._v("webpack-dev-server "),a("OutboundLink")],1),t._v("集成的插件。该插件提供了 proxy 代理配置，基于 express 中间件 "),a("a",{attrs:{href:"https://github.com/chimurai/http-proxy-middleware",target:"_blank",rel:"noopener noreferrer"}},[t._v("http-proxy-middleware"),a("OutboundLink")],1),t._v("实现，该中间件又基于 node "),a("a",{attrs:{href:"https://github.com/nodejitsu/node-http-proxy",target:"_blank",rel:"noopener noreferrer"}},[t._v("http-proxy "),a("OutboundLink")],1),t._v(",所以如果要详细知道 proxy 各个参数的意义和实现方式，可以阅读下 http-proxy 的源码。")]),t._v(" "),a("blockquote",[a("p",[t._v("proxy 作用：解决开发环境的跨域问题(不用再去配置 nginx）")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("devServer")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 提供静态文件目录地址")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 基于express.static实现")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("contentBase")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dist'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 任意的 404 响应都被替代为 index.html")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 基于node connect-history-api-fallback包实现")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("historyApiFallback")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是否一切服务都启用 gzip 压缩")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 基于node compression包实现")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("compress")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是否隐藏bundle信息")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("noInfo")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 发生错误是否覆盖在页面上")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("overlay")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是否开启热加载")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 必须搭配webpack.HotModuleReplacementPlugin 才能完全启用 HMR。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 webpack 或 webpack-dev-server 是通过 --hot 选项启动的，那么这个插件会被自动添加")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("hot")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 热加载模式")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true代表inline模式，false代表iframe模式")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("inline")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 默认是true")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是否自动打开")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置本地url和端口号")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("host")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'localhost'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("port")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代理")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 基于node http-proxy-middleware包实现")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("proxy")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配api前缀时，则代理到3001端口")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 即http://localhost:8080/api/123 = http://localhost:3001/api/123")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注意:这里是把当前server8080代理到3001，而不是任意端口的api代理到3001")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v("'/api'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://localhost:3001'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置为true, 本地就会虚拟一个服务器接收你的请求并代你发送该请求")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 主要解决跨域问题")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("changeOrigin")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 针对代理https")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("secure")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 覆写路径：http://localhost:8080/api/123 = http://localhost:3001/123")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("pathRewrite")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v("'^/api'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);