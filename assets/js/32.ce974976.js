(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{583:function(t,a,s){"use strict";s.r(a);var n=s(13),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"函数式编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程"}},[t._v("#")]),t._v(" 函数式编程")]),t._v(" "),s("blockquote",[s("p",[t._v("函数式编程（functional programming）或称函数程序设计、泛函编程，是一种编程范式，它将电脑运算视为函数运算，并且避免使用程序状态以及易变对象。")]),t._v(" "),s("p",[t._v("函数式编程关心数据的映射，命令式编程关心解决问题的步骤。")]),t._v(" "),s("p",[t._v("也许是继“面向对象编程”之后，下一个主流的编程范式，历史是个圈。")])]),t._v(" "),s("h4",{attrs:{id:"简单地说-函数式编程就是把运算过程尽可能地用函数嵌套来表示。javascript-符合函数式编程的范式-也有纯函数的概念。到近些年-函数式以其优雅-简单的特点开始重新风靡整个编程界-主流语言在设计的时候无一例外都会更多的参考函数式特性lambda表达式、原生支持map、reduce、rest-java8-开始支持函数式编程等等。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简单地说-函数式编程就是把运算过程尽可能地用函数嵌套来表示。javascript-符合函数式编程的范式-也有纯函数的概念。到近些年-函数式以其优雅-简单的特点开始重新风靡整个编程界-主流语言在设计的时候无一例外都会更多的参考函数式特性lambda表达式、原生支持map、reduce、rest-java8-开始支持函数式编程等等。"}},[t._v("#")]),t._v(" 简单地说，函数式编程就是把运算过程尽可能地用函数嵌套来表示。JavaScript 符合函数式编程的范式，也有纯函数的概念。到近些年，函数式以其优雅，简单的特点开始重新风靡整个编程界，主流语言在设计的时候无一例外都会更多的参考函数式特性"),s("code",[t._v("Lambda")]),t._v("表达式、原生支持"),s("code",[t._v("map")]),t._v("、"),s("code",[t._v("reduce")]),t._v("、"),s("code",[t._v("rest，")]),t._v("Java8`开始支持函数式编程等等。")]),t._v(" "),s("h4",{attrs:{id:"在前端领域-我们同样能看到很多函数式编程的影子-es6中加入了箭头函数-redux引入elm思路降低flux的复杂性-react16-6开始推出react-memo-使得pure-functional-components成为可能-16-8开始主推hooks-建议使用pure-function进行组件编写等等。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在前端领域-我们同样能看到很多函数式编程的影子-es6中加入了箭头函数-redux引入elm思路降低flux的复杂性-react16-6开始推出react-memo-使得pure-functional-components成为可能-16-8开始主推hooks-建议使用pure-function进行组件编写等等。"}},[t._v("#")]),t._v(" 在前端领域，我们同样能看到很多函数式编程的影子，"),s("code",[t._v("ES6")]),t._v("中加入了箭头函数，"),s("code",[t._v("Redux")]),t._v("引入"),s("code",[t._v("Elm")]),t._v("思路降低"),s("code",[t._v("Flux")]),t._v("的复杂性，"),s("code",[t._v("React16.6")]),t._v("开始推出"),s("code",[t._v("React.memo()")]),t._v("，使得"),s("code",[t._v("pure functional components")]),t._v("成为可能，"),s("code",[t._v("16.8")]),t._v("开始主推"),s("code",[t._v("Hooks")]),t._v("，建议使用"),s("code",[t._v("pure function")]),t._v("进行组件编写等等。")]),t._v(" "),s("ul",[s("li",[t._v("函数和其他对象一样，可以存在数组里，当作参数传递，赋值给变量…")]),t._v(" "),s("li",[t._v("没有副作用，函数保持独立，没有与作用域外的互动")]),t._v(" "),s("li",[t._v("引用透明===纯函数的概念，纯函数是这样一种函数，即相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用")]),t._v(" "),s("li",[t._v("状态的不可变性，在 JavaScript 中的 splice()改变原数组和 slice()拷贝返回新数组")]),t._v(" "),s("li",[t._v("柯里化"),s("code",[t._v("Currying")]),t._v("和函数组合"),s("code",[t._v("Compose")]),t._v("。")])]),t._v(" "),s("h4",{attrs:{id:"currying-的重要意义在于可以把函数完全变成「接受一个参数-返回一个值」的固定形式-这样对于讨论和优化会更加方便。对于柯里化currying-简单来说就是将一个多元函数-转换成一个依次调用的单元函数-也就是把一个多参数的函数转化为单参数函数的方法-函数的柯里化是用于将一个操作分成多步进行-并且可以改变函数的行为-在我的理解中柯里化实际就是实现了一个状态机-当达到指定参数时就从继续接收参数的状态转换到执行函数的状态。简单来说-通过柯里化可以把函数调用的形式改变。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#currying-的重要意义在于可以把函数完全变成「接受一个参数-返回一个值」的固定形式-这样对于讨论和优化会更加方便。对于柯里化currying-简单来说就是将一个多元函数-转换成一个依次调用的单元函数-也就是把一个多参数的函数转化为单参数函数的方法-函数的柯里化是用于将一个操作分成多步进行-并且可以改变函数的行为-在我的理解中柯里化实际就是实现了一个状态机-当达到指定参数时就从继续接收参数的状态转换到执行函数的状态。简单来说-通过柯里化可以把函数调用的形式改变。"}},[t._v("#")]),t._v(" Currying 的重要意义在于可以把函数完全变成「接受一个参数；返回一个值」的固定形式，这样对于讨论和优化会更加方便。对于柯里化"),s("code",[t._v("Currying")]),t._v("，简单来说就是将一个多元函数，转换成一个依次调用的单元函数，也就是把一个多参数的函数转化为单参数函数的方法，函数的柯里化是用于将一个操作分成多步进行，并且可以改变函数的行为，在我的理解中柯里化实际就是实现了一个状态机，当达到指定参数时就从继续接收参数的状态转换到执行函数的状态。简单来说，通过柯里化可以把函数调用的形式改变。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("y")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" increment "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" addTen "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("increment")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addTen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 12")]),t._v("\n")])])]),s("h4",{attrs:{id:"函数组合的目的是将多个函数组合成一个函数-将函数串联起来执行-一个函数的输出结果是另一个函数的输入参数-一旦第一个函数开始执行-就会像多米诺骨牌一样推导执行了。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数组合的目的是将多个函数组合成一个函数-将函数串联起来执行-一个函数的输出结果是另一个函数的输入参数-一旦第一个函数开始执行-就会像多米诺骨牌一样推导执行了。"}},[t._v("#")]),t._v(" 函数组合的目的是将多个函数组合成一个函数，将函数串联起来执行，一个函数的输出结果是另一个函数的输入参数，一旦第一个函数开始执行，就会像多米诺骨牌一样推导执行了。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("compose")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("f")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("g")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compose")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" g"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fg")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3")]),t._v("\n")])])]),s("h4",{attrs:{id:"我们可以看到compose就实现了一个简单的功能-形成了一个全新的函数-而这个函数就是一条从g-f的流水线-同时我们可以很轻易的发现compose其实是满足结合律的。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我们可以看到compose就实现了一个简单的功能-形成了一个全新的函数-而这个函数就是一条从g-f的流水线-同时我们可以很轻易的发现compose其实是满足结合律的。"}},[t._v("#")]),t._v(" 我们可以看到"),s("code",[t._v("compose")]),t._v("就实现了一个简单的功能，形成了一个全新的函数，而这个函数就是一条从"),s("code",[t._v("g -> f")]),t._v("的流水线，同时我们可以很轻易的发现"),s("code",[t._v("compose")]),t._v("其实是满足结合律的。")]),t._v(" "),s("h5",{attrs:{id:"参考文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章：")]),t._v(" "),s("p",[t._v("1.https://github.com/WindrunnerMax/EveryDay/blob/master/JavaScript/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%9A%84%E7%90%86%E8%A7%A3.md")]),t._v(" "),s("p",[t._v("2.http://www.ruanyifeng.com/blog/2012/04/functional_programming.html")]),t._v(" "),s("p",[t._v("3.https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch1.html")]),t._v(" "),s("p",[t._v("4.https://www.zhihu.com/question/20037482")])])}),[],!1,null,null,null);a.default=e.exports}}]);