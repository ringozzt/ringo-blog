(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{646:function(e,t,r){"use strict";r.r(t);var a=r(13),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"tree-shaking"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tree-shaking"}},[e._v("#")]),e._v(" tree-shaking")]),e._v(" "),r("blockquote",[r("p",[e._v("五柳：“搞清楚一些模糊的概念的优先级是优于了解其底层实现的”")])]),e._v(" "),r("p",[e._v("结论：")]),e._v(" "),r("ol",[r("li",[e._v("webpack 的 tree-shaking 方式之一通过 Terser、UglifyJS 这一类 DCE（Dead Code Elimination）工具来完成；")]),e._v(" "),r("li",[e._v("rollup 早期没有 DCE 概念，后来的版本(2.55.1)也原生支持了 DCE。")])]),e._v(" "),r("p",[e._v("Tree-shaking 这一术语在前端社区内，起初是 "),r("a",{attrs:{href:"https://github.com/Rich-Harris",target:"_blank",rel:"noopener noreferrer"}},[e._v("Rich Harris"),r("OutboundLink")],1),e._v(" 在 Rollup 中提出。")]),e._v(" "),r("p",[e._v("简单概括起来，Tree-shaking 可以使得项目最终构建（Bundle）结果中只包含你实际需要的代码。")]),e._v(" "),r("p",[e._v("下面也会介绍一下"),r("strong",[e._v("rollup")]),e._v("这个轻量级的打包器，实际上也是 vite、snowpack 实现 build 步骤的依靠。")]),e._v(" "),r("blockquote",[r("p",[e._v("vite 文档：")]),e._v(" "),r("p",[e._v("尽管原生 ESM 现在得到了广泛支持，但由于嵌套导入会导致额外的网络往返，在生产环境中发布未打包的 ESM 仍然效率低下（即使使用 HTTP/2）。为了在生产环境中获得最佳的加载性能，最好还是将代码进行 tree-shaking、懒加载和 chunk 分割（以获得更好的缓存）。")]),e._v(" "),r("h5",{attrs:{id:"为何不用-esbuild-打包"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为何不用-esbuild-打包"}},[e._v("#")]),e._v(" 为何不用 ESBuild 打包？"),r("a",{attrs:{href:"https://cn.vitejs.dev/guide/why.html#why-not-bundle-with-esbuild",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("虽然 "),r("code",[e._v("esbuild")]),e._v(" 快得惊人，并且已经是一个在构建库方面比较出色的工具，但一些针对构建 "),r("em",[e._v("应用")]),e._v(" 的重要功能仍然还在持续开发中 —— 特别是代码分割和 CSS 处理方面。就目前来说，Rollup 在应用打包方面更加成熟和灵活。尽管如此，当未来这些功能稳定后，我们也不排除使用 "),r("code",[e._v("esbuild")]),e._v(" 作为生产构建器的可能。")])]),e._v(" "),r("hr"),e._v(" "),r("h2",{attrs:{id:"rollup"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rollup"}},[e._v("#")]),e._v(" rollup")]),e._v(" "),r("p",[e._v("rollup 的产生就是针对开发 js 库的。")]),e._v(" "),r("blockquote",[r("p",[e._v("rollup 生成代码只是把我们的代码转码成目标格式 js 并无其他，同时如果需要，他可以同时帮我们生成支持 umd/commonjs/es 的 js 代码，vue/react/angular 都在用他作为打包工具。查看他们的官网代码都可以看到 rollup 的影子。")])]),e._v(" "),r("h4",{attrs:{id:"对比-webpack"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#对比-webpack"}},[e._v("#")]),e._v(" 对比 webpack")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("webpack")]),e._v("可以进行"),r("strong",[e._v("代码分隔")]),e._v(","),r("strong",[e._v("静态资源处理")]),e._v(","),r("strong",[e._v("热模块替换")])]),e._v(" "),r("li",[r("code",[e._v("rollup")]),e._v("支持"),r("code",[e._v("ES6 module")]),e._v("，"),r("code",[e._v("tree-shaking")]),e._v("功能强大；但"),r("code",[e._v("webpack")]),e._v("不支持导出"),r("code",[e._v("ES6 module")]),e._v("。")]),e._v(" "),r("li",[r("code",[e._v("webpack")]),e._v("打包体积臃肿，"),r("code",[e._v("rollup")]),e._v("打包后简洁，更接近源代码。")])]),e._v(" "),r("p",[e._v("对比两者各自特性，可以发现"),r("code",[e._v("webpack")]),e._v("更适合于"),r("code",[e._v("应用")]),e._v("，而"),r("code",[e._v("rollup")]),e._v("更适用于"),r("code",[e._v("类库")]),e._v("。")]),e._v(" "),r("hr"),e._v(" "),r("h2",{attrs:{id:"esm-如何转为-cjs"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#esm-如何转为-cjs"}},[e._v("#")]),e._v(" esm 如何转为 cjs")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://juejin.cn/post/6844904126195695624",target:"_blank",rel:"noopener noreferrer"}},[e._v("为什么能快乐的在 esm 中使用 cjs 模块"),r("OutboundLink")],1)]),e._v(" "),r("ul",[r("li",[e._v("default 的处理比较特殊，不能"),r("code",[e._v("export == exports.xx")]),e._v(" 一一对应，需要交给 babel 处理")])]),e._v(" "),r("p",[r("a",{attrs:{href:"https://www.rollupjs.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("rollup 官网"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://juejin.cn/post/6968262966604988429",target:"_blank",rel:"noopener noreferrer"}},[e._v("项目减重之 rollup 的 Tree-shaking"),r("OutboundLink")],1)]),e._v(" "),r("hr"),e._v(" "),r("h2",{attrs:{id:"rollup-和-webpack-的-tree-shaking"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rollup-和-webpack-的-tree-shaking"}},[e._v("#")]),e._v(" rollup 和 webpack 的 tree-shaking")]),e._v(" "),r("p",[e._v("说到 Tree-shaking，不难免提及 Dead Code Elimination，相信很多同学在一些关于 Tree-shaking 的文章中都会看到诸如这样的描述：Tree-shaking 是一项 Dead Code Elimination（以下统称 DCE）技术。")]),e._v(" "),r("p",[e._v("也许这个时候你会问 Tree-shaking 不是还会消除 Dead Code 吗？")]),e._v(" "),r("p",[e._v("确实，但是也不一定，如果你使用的是现在的 Rollup "),r("code",[e._v("v2.55.1")]),e._v("，它是会进行 DCE，即消除 Dead Code。")]),e._v(" "),r("p",[e._v("但是，如果你用的是 Webpack 的话，那就是另一番情况了，它需要使用 Terser、Uglify 对应的插件来实现 DCE。")]),e._v(" "),r("h3",{attrs:{id:"webpack"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[e._v("#")]),e._v(" webpack")]),e._v(" "),r("p",[e._v("两种方式:")]),e._v(" "),r("ol",[r("li",[e._v("optimization 中配置 usedExports 为 true，来帮助 terser 进行优化")]),e._v(" "),r("li",[e._v("在 package.json 中配置 sideEffects 为 true，直接帮助模块进行优化")])]),e._v(" "),r("p",[e._v("方案一 中 Tree Shaking 的实现分为如下步骤：")]),e._v(" "),r("ul",[r("li",[e._v("在 "),r("code",[e._v("FlagDependencyExportsPlugin")]),e._v(" 插件中根据模块的 "),r("code",[e._v("dependencies")]),e._v(" 列表收集模块导出值，并记录到 ModuleGraph 体系的 "),r("code",[e._v("exportsInfo")]),e._v(" 中")]),e._v(" "),r("li",[e._v("在 "),r("code",[e._v("FlagDependencyUsagePlugin")]),e._v(" 插件中收集模块的导出值的使用情况，并记录到 "),r("code",[e._v("exportInfo._usedInRuntime")]),e._v(" 集合中")]),e._v(" "),r("li",[e._v("在 "),r("code",[e._v("HarmonyExportXXXDependency.Template.apply")]),e._v(" 方法中根据导出值的使用情况生成不同的导出语句")]),e._v(" "),r("li",[e._v("使用 DCE 工具删除 Dead Code，实现完整的树摇效果")])]),e._v(" "),r("p",[e._v("在 Webpack 中，启动 Tree Shaking 功能必须同时满足三个条件：")]),e._v(" "),r("ul",[r("li",[e._v("使用 ESM 规范编写模块代码")]),e._v(" "),r("li",[e._v("配置 "),r("code",[e._v("optimization.usedExports")]),e._v(" 为 "),r("code",[e._v("true")]),e._v("，启动标记功能")]),e._v(" "),r("li",[e._v("启动代码优化功能，可以通过如下方式实现：\n"),r("ul",[r("li",[e._v("配置 "),r("code",[e._v("mode = production")])]),e._v(" "),r("li",[e._v("配置 "),r("code",[e._v("optimization.minimize = true")])]),e._v(" "),r("li",[e._v("提供 "),r("code",[e._v("optimization.minimizer")]),e._v(" 数组")])])])]),e._v(" "),r("p",[e._v("例如：")]),e._v(" "),r("div",{staticClass:"language-Javascript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-javascript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// webpack.config.js")]),e._v("\nmodule"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("exports "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),r("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("entry")]),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[e._v('"./src/index"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),r("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("mode")]),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[e._v('"production"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),r("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("devtool")]),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),r("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("optimization")]),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),r("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("usedExports")]),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),r("h3",{attrs:{id:"rollup-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rollup-2"}},[e._v("#")]),e._v(" rollup")]),e._v(" "),r("h3",{attrs:{id:"早期的-tree-shaking"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#早期的-tree-shaking"}},[e._v("#")]),e._v(" 早期的 Tree-shaking")]),e._v(" "),r("p",[e._v("Rich Haris 举了个做蛋糕的例子，指出 DCE 就好比在做蛋糕的时候直接把鸡蛋放入搅拌，最后在做好的蛋糕中取出蛋壳，这是不完美的做法，而 Tree-shaking 则是在做蛋糕的时候只放入我想要的东西，即不会把蛋壳放入搅拌制作蛋糕。")]),e._v(" "),r("p",[e._v("因此，Tree-shaking 表达的不是指消除 Dead Code，而是指保留 Live Code。即使最终 DCE 和 Tree-shaking 的结果是一致的，但是由于 JavaScript 静态分析的局限性，实际过程并不同。并且，包含有用的代码可以得到更好的结果，从表面看（做蛋糕的例子）这也是一种更符合逻辑的方法。")]),e._v(" "),r("p",[e._v("在早期， Rollup 提出和支持 Tree-shaking 的时候，它并不会做额外的 DCE，这也可以在 15 年 Rich Haris 写的"),r("a",{attrs:{href:"https://medium.com/@Rich_Harris/tree-shaking-versus-dead-code-elimination-d3765df85c80",target:"_blank",rel:"noopener noreferrer"}},[e._v("那篇文章"),r("OutboundLink")],1),e._v("中看出，当时他也提倡大家使用 Rollup + Uglify。")]),e._v(" "),r("p",[e._v("Rollup 的 Tree-shaking 最初并不支持 DCE，它仅仅"),r("strong",[e._v("只是在构建结果中保留你导入的模块中需要的代码")]),e._v("。")]),e._v(" "),r("h3",{attrs:{id:"现在的-tree-shaking"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#现在的-tree-shaking"}},[e._v("#")]),e._v(" 现在的 Tree-shaking")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://rollupjs.org/guide/en/#what-is-tree-shaking",target:"_blank",rel:"noopener noreferrer"}},[e._v("现在 Rollup 官方介绍的 tree-shaking"),r("OutboundLink")],1)]),e._v(" "),r("blockquote",[r("p",[e._v("Tree-shaking，也被称为 Live Code Inclusion，是指 Rollup 消除项目中实际未使用的代码的过程，它是一种 Dead Code Elimination 的方式，但是在输出方面会比其他方法更有效。")]),e._v(" "),r("p",[e._v("该名称源自模块的抽象语法树（Abstract Sytanx Tree）。该算法首先会标记所有相关的语句，然后通过摇动语法树来删除所有的 Dead Code。")]),e._v(" "),r("p",[e._v("Tree-shaking 是 DCE 的一种新的实现，Javascript 同传统的编程语言不同的是，javascript 绝大多数情况需要通过网络进行加载，然后执行，加载的文件大小越小，整体执行时间更短，所以去除无用代码以减少文件体积，对 javascript 来说更有意义。")]),e._v(" "),r("p",[e._v("它在思想上类似于 GC（Garbage Collection）中的标记清除算法。尽管，"),r("strong",[e._v("该算法不限于 ES Module")]),e._v("，但它们使其效率更高，因为它允许 Rollup 将所有模块一起视为具有共享绑定的大抽象语法树。")])]),e._v(" "),r("p",[e._v("随着时间的推移，Rollup "),r("strong",[e._v("原生支持了 DCE")]),e._v("，对 Tree-shaking 的定义已经不仅仅是 ES Module 相关。")]),e._v(" "),r("p",[e._v("所以，有时候我们看到一些文章介绍 Tree-shaking 实现会是这样：")]),e._v(" "),r("ul",[r("li",[e._v("利用 "),r("strong",[e._v("ES Module 可以进行静态分析")]),e._v("的特点来检测模块内容的导出、导入以及被使用的情况，保留 Live Code")]),e._v(" "),r("li",[e._v("消除"),r("strong",[e._v("不会被执行")]),e._v("和"),r("strong",[e._v("没有副作用（Side Effect）")]),e._v(" 的 Dead Code，即 DCE 过程")])]),e._v(" "),r("p",[e._v("第 2 点就是说，一段代码"),r("strong",[e._v("没有被执行")]),e._v("，但是"),r("strong",[e._v("存在副作用")]),e._v("，这部分代码就不会被消除。")]),e._v(" "),r("blockquote",[r("h3",{attrs:{id:"副作用哪来的"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#副作用哪来的"}},[e._v("#")]),e._v(" 副作用哪来的：")]),e._v(" "),r("p",[e._v("babel 为了符合 ES6 真正的语义，会做一些改变源码，产生副作用的转义。")]),e._v(" "),r("p",[e._v("除非开启"),r("code",[e._v("loose")]),e._v("模式，直译的话叫做宽松模式。它是做什么用的呢？它会不严格遵循 ES6 的语义，而采取更符合我们平常编写代码时的习惯去编译代码。")]),e._v(" "),r("p",[e._v("这个模式具体的 babel 配置如下：")]),e._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// .babelrc")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),r("span",{pre:!0,attrs:{class:"token string-property property"}},[e._v('"presets"')]),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),r("span",{pre:!0,attrs:{class:"token string"}},[e._v('"env"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token string-property property"}},[e._v('"loose"')]),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])])]),e._v(" "),r("h3",{attrs:{id:"dead-code-一般具有以下几个特征"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dead-code-一般具有以下几个特征"}},[e._v("#")]),e._v(" Dead Code 一般具有以下几个特征")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("代码不会被执行，不可到达")])]),e._v(" "),r("li",[r("p",[e._v("代码执行的结果不会被用到")])]),e._v(" "),r("li",[r("p",[e._v("代码只会影响死变量（只写不读）")])])]),e._v(" "),r("h3",{attrs:{id:"rollup-能做什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rollup-能做什么"}},[e._v("#")]),e._v(" rollup 能做什么")]),e._v(" "),r("ul",[r("li",[e._v("rollup 只处理函数和顶层的 import/export 变量，不能把没用到的类的方法消除掉")]),e._v(" "),r("li",[e._v("javascript 动态语言的特性使得静态分析比较困难，rollup 只能静态分析")])]),e._v(" "),r("hr"),e._v(" "),r("h3",{attrs:{id:"感谢巨人"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#感谢巨人"}},[e._v("#")]),e._v(" 感谢巨人")]),e._v(" "),r("ol",[r("li",[r("a",{attrs:{href:"https://segmentfault.com/a/1190000040476979",target:"_blank",rel:"noopener noreferrer"}},[e._v("从过去到现在，聊聊 Tree-shaking 是什么？"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://segmentfault.com/a/1190000040009496",target:"_blank",rel:"noopener noreferrer"}},[e._v("揭秘 Rollup Tree Shaking"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://juejin.cn/post/7002410645316436004",target:"_blank",rel:"noopener noreferrer"}},[e._v("Webpack Tree-Shaking 实现原理"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://mp.weixin.qq.com/s/7C9fsdwvHokLngrK-XYdZQ",target:"_blank",rel:"noopener noreferrer"}},[e._v("tree-shaking 还得是 rollup，webpack 不行？"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://juejin.cn/post/6844903544756109319",target:"_blank",rel:"noopener noreferrer"}},[e._v("Tree-Shaking 性能优化实践 - 原理篇"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://cn.vitejs.dev/guide/why.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("why vite"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=s.exports}}]);