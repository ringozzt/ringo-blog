(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{585:function(t,s,a){"use strict";a.r(s);var e=a(13),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git-命令清单"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-命令清单"}},[t._v("#")]),t._v(" Git 命令清单")]),t._v(" "),a("h2",{attrs:{id:"git-基础概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-基础概念"}},[t._v("#")]),t._v(" git 基础概念")]),t._v(" "),a("p",[t._v("Workapce：工作区")]),t._v(" "),a("p",[t._v("Index/Stage：暂存区")]),t._v(" "),a("p",[t._v("Repository：仓库区（本地仓库）")]),t._v(" "),a("p",[t._v("Remote：远程仓库")]),t._v(" "),a("p",[t._v("下面的'"),a("name",[t._v("'，指我的分支名")])],1),t._v(" "),a("h3",{attrs:{id:"常用的拉代码操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用的拉代码操作"}},[t._v("#")]),t._v(" 常用的拉代码操作：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin “GitHub项目地址” \t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("通过ssh或配置git账户然后使用http/https"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone “GitHub项目地址”\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("通过ssh或配置git账户然后使用http/https"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("h3",{attrs:{id:"常用的一次提交过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用的一次提交过程"}},[t._v("#")]),t._v(" 常用的一次提交过程：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"本次提交信息"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull origin master\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 简写 git push -u origin master｜完整 git push --set-upstream origin master")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -u origin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("h3",{attrs:{id:"常用操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用操作"}},[t._v("#")]),t._v(" 常用操作：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看当前分支")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建分支")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切换分支")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建并切换分支")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -D "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 强行删除分支")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 合并<name>分支到当前分支")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --oneline  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看当前分支的commit日志")]),t._v("\n")])])]),a("h2",{attrs:{id:"重点-实际场景-学习命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重点-实际场景-学习命令"}},[t._v("#")]),t._v(" 重点：实际场景 - 学习命令")]),t._v(" "),a("h3",{attrs:{id:"场景一"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景一"}},[t._v("#")]),t._v(" 场景一")]),t._v(" "),a("p",[a("strong",[t._v("我正在 dev 分支上开发，突然来了一个 Jira，我不得不丢下手中的代码切换到 master 分支查看情况。只能提个临时的 commit 保存现场吗？")])]),t._v(" "),a("h4",{attrs:{id:"使用-stash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-stash"}},[t._v("#")]),t._v(" 使用 stash")]),t._v(" "),a("p",[t._v("提一个 commit 当然也可以，但是这种情况最适合的操作是 "),a("code",[t._v("git stash")]),t._v(" 来保存中间态")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash save "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"half of work"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout feature/dev\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash pop\n")])])]),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 把所有未提交的修改（包括暂存的和非暂存的）都保存起来")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash save "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"msg"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 应用缓存堆栈中的第一个 stash 后移除它")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash pop\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看 stash 列表")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash list\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 应用指定的 stash ，但不在事后移除")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash apply "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("stash id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看 stash 的 diff 内容")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash -p "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("stash id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 移除某个stash")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash drop "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("stash id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 清空 stash")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("clear")]),t._v("\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"场景二"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景二"}},[t._v("#")]),t._v(" 场景二")]),t._v(" "),a("p",[a("strong",[t._v("项目开发过程中，即使对应的功能并没有完成，最好每天下班前都提交一下 commit，防止电脑晚上出啥问题导致进度丢失。")])]),t._v(" "),a("p",[a("strong",[t._v("为了最终不出现太多无意义的或含义重复的 commit，我该怎么做呢？")])]),t._v(" "),a("h4",{attrs:{id:"使用-amend"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-amend"}},[t._v("#")]),t._v(" 使用 amend")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将本次修改和上一次 commit 合并，且可以修改 commit msg")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果 amend 不输入 -m ，则采用上一次 commit 的msg")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -a 参数就是可以把还没有执行add命令的修改一起提交")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -a --amend -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"new msg"')]),t._v("\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"场景三"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景三"}},[t._v("#")]),t._v(" 场景三")]),t._v(" "),a("p",[a("strong",[t._v("我一个人开发某项目，从 master 拉出自己的开发分支 feature/dev，同时 master 仍在更新中，怎样的开发模式可以避免最后合并到 master 时有太多的冲突？")])]),t._v(" "),a("h4",{attrs:{id:"答案是使用-merge-和-rebase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#答案是使用-merge-和-rebase"}},[t._v("#")]),t._v(" 答案是使用 merge 和 rebase")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/ringozzt/myPics@main/merge-rebase.png",alt:"merge和rebase的区别"}})]),t._v(" "),a("h4",{attrs:{id:"直观的结果是-merge-产生两根线-rebase-产生一根线。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#直观的结果是-merge-产生两根线-rebase-产生一根线。"}},[t._v("#")]),t._v(" 直观的结果是 merge 产生两根线，rebase 产生一根线。")]),t._v(" "),a("p",[t._v("merge 的优点是使用简单，保留了分支的结构，便于回溯；缺点是分支结构太多，看起来不美观")]),t._v(" "),a("p",[t._v("rebase 的优点是分支结构优雅美观，缺点是丢失了分支结构，模糊了分支间的关系，且 rebase 过程中可能进行多次冲突的解决。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# on feature/dev")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git fetch + git rebase")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git pull 操作默认的使用 merge 方式将远端修改拉到本地，如果 git pull -r 就会使用 rebase 将远端修改拉到本地")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull origin master -rebase\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge master\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切到需要合并的分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("dev"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 合并<name>分支到当前分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("master"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切到需要合并的分支，也就是 待变基分支、当前分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("dev"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 相当于把<dev>的树枝掰断，嫁接到 基分支<master> 尾端")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("master"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 官方解释：当执行 rebase 操作时，git 会从两个分支的共同祖先开始提取‘待变基分支上的修改’，然后将待变基分支指向基分支的最新提交，最后将刚才‘提取的修改’应用到‘基分支的最新提交’的后面。")]),t._v("\n")])])]),a("p",[t._v("具体使用上两者没有好坏之分，根据团队约定即可。")]),t._v(" "),a("p",[t._v("但是多人协作的场景，比如有人在以我的 feature/dev 分支为基础进行开发，要慎用 rebase。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("rebase 工作流：\ngit rebase\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("存在冲突"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    git status\n    找到当前冲突文件，编辑解决冲突\n    git add "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("u\n    git rebase "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" git rebase "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("abort "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nmerge工作流 ：\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("git "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pull")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("或fetch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" merge"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("编辑冲突文件\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("git pull\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"场景四"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景四"}},[t._v("#")]),t._v(" 场景四")]),t._v(" "),a("p",[a("strong",[t._v("项目开发过程中没有使用 git commit --amend 整理 commit 记录。可以在项目开发完提交 cr 或 mr 之前，再对 commit 进行整理合并吗？")])]),t._v(" "),a("h4",{attrs:{id:"答案还是-git-rebase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#答案还是-git-rebase"}},[t._v("#")]),t._v(" 答案还是 "),a("code",[t._v("git rebase")])]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# on feature/dev")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 合并从 startpoint 到 endpoint 的commit，endpoint 默认为HEAD")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase -i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("startpoint"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("endpoint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#or")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 合并从 HEAD 版本开始往过去数 N 个版本")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase -i HEAD~N\n")])])]),a("ol",[a("li",[a("p",[t._v("输入上面的任意一条命令后，分为两个区域，命令编辑区和命令说明区。")])]),t._v(" "),a("li",[a("p",[t._v("在命令编辑区将 pick 改成 s 代表合并此 commit ，将下面两个 pick 改为 s 就是合并到第一个 commit，")]),t._v(" "),a("p",[t._v("完成编辑后通过 vim 的 "),a("code",[t._v(":wq")]),t._v(" 或 "),a("code",[t._v(":x")]),t._v(" 可以保存并退出，进入下一个 msg 修改界面，")])]),t._v(" "),a("li",[a("p",[t._v("修改提交信息后，同样通过 vim 的 "),a("code",[t._v(":wq")]),t._v(" 或 "),a("code",[t._v(":x")]),t._v(" 可以保存并退出。")])])]),t._v(" "),a("p",[t._v("至此，整个合并操作便完成了~")]),t._v(" "),a("p",[t._v("恭喜你，变基成功 ：）🤪")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/ringozzt/myPics@main/rebase-process.png",alt:"rebase图示"}})]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"场景五"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景五"}},[t._v("#")]),t._v(" 场景五")]),t._v(" "),a("p",[a("strong",[t._v("假设 v2 是稳定版本的分支，v3 是开发版本的分支，我们不能直接把两个分支合并，这样会导致稳定版本混乱，但是又想增加一个 v3 的功能到 v2 中，怎么办？")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/ringozzt/myPics@main/cherry-pick.png",alt:"cherry图示"}})]),t._v(" "),a("h4",{attrs:{id:"git-cherry-pick-可以解决"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-cherry-pick-可以解决"}},[t._v("#")]),t._v(" git cherry-pick 可以解决")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将指定的提交 commitHash 应用于当前分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" cherry-pick "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commitHash"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 支持一次 pick 多个提交")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" cherry-pick "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("HashA"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("HashB"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 转移从 A 到 B 的所有提交。且 A 必须早于 B")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# A不被包含在 Cherry-pick 中，左开右闭，(A, B]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" cherry-pick A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("B\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 作用同上，但 A 包含在 Cherry-pick 中, 左闭右闭，[A, B]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" cherry-pick A^"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("B\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"merge-和-rebase-解决冲突"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merge-和-rebase-解决冲突"}},[t._v("#")]),t._v(" merge 和 rebase 解决冲突")]),t._v(" "),a("p",[t._v("上面的一些命令中，容易产生冲突的有 merge、rebase、cherry-pick；其中 rebase 和 cherry-pick 类似，可能连续冲突多次，需要使用 continue 推进下一步。")]),t._v(" "),a("p",[a("strong",[t._v("rebase、cherry-pick 的冲突是一个一个解决，如果有十个冲突怎么办呢，按照下列命令执行")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(". 查看并手动解决冲突\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(". "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -a -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"msg"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(". "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase –contiune\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(". 循环上面三个步骤直到 rebase 成功\n")])])]),a("p",[a("strong",[t._v("而 merge 是所有的冲突都会一次性显示出来。")])]),t._v(" "),a("p",[a("strong",[t._v("另外如果 rebase 过程中，你想中途退出，恢复 rebase 前的代码则可以用命令")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase –abort\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# rebase前最好先push <name>到远端，留下一些记录")]),t._v("\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"git-pull"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-pull"}},[t._v("#")]),t._v(" git pull")]),t._v(" "),a("p",[a("strong",[t._v("git pull == git fetch(获取) + git merge(合并)")])]),t._v(" "),a("p",[t._v("git merge 前一定要 git fetch，因为 git fetch 相当于将 ‘远程仓库的内容 ’ 更新到 ‘远程仓库副本’")]),t._v(" "),a("p",[a("code",[t._v("git fetch")]),t._v("是将远程主机的最新内容拉到本地，用户在检查了以后决定是否合并到工作本机分支中。")]),t._v(" "),a("p",[t._v("而"),a("code",[t._v("git pull")]),t._v(" 则是将远程主机的最新内容拉下来后直接合并，即："),a("code",[t._v("git pull = git fetch + git merge")]),t._v("，这样可能会产生冲突，需要手动解决。")]),t._v(" "),a("p",[a("strong",[t._v("企业级理解：")])]),t._v(" "),a("p",[t._v("fecth 只获取信息，不动你的东西。等于你浏览了网页，知道发新番了，你也能上 B 站看，然而你本地么也无有。")]),t._v(" "),a("p",[t._v("pull 就是你看到发新番了，把它下载下来，小心翼翼的备份到了你个人本地的片库里。")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"回滚"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回滚"}},[t._v("#")]),t._v(" 回滚")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/ringozzt/myPics@main/gitreset.png",alt:"revert-reset"}})]),t._v(" "),a("h4",{attrs:{id:"核心区别-是否生成了一个-revert-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心区别-是否生成了一个-revert-commit"}},[t._v("#")]),t._v(" 核心区别：是否生成了一个 revert-commit")]),t._v(" "),a("p",[t._v("由于回滚完还是需要 MR，我们一般直接操作 gitlab 或者 github 上的还原，这个还原其实就是 git revert")]),t._v(" "),a("h4",{attrs:{id:"但是在合并主分支后-要注意操作顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#但是在合并主分支后-要注意操作顺序"}},[t._v("#")]),t._v(" 但是在合并主分支后，要注意操作顺序")]),t._v(" "),a("img",{staticStyle:{zoom:"35%"},attrs:{src:"https://cdn.jsdelivr.net/gh/ringozzt/myPics@main/revert-trap.png"}}),t._v(" "),a("h3",{attrs:{id:"gui-软件有助于理解-git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gui-软件有助于理解-git"}},[t._v("#")]),t._v(" GUI 软件有助于理解 Git")]),t._v(" "),a("ol",[a("li",[t._v("Sourcetree")]),t._v(" "),a("li",[t._v("Github Desktop")]),t._v(" "),a("li",[t._v("vscode 插件 Git Graph")])]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结：")]),t._v(" "),a("ol",[a("li",[t._v("stash 暂存命令")]),t._v(" "),a("li",[t._v("amend 合并/修改上一个 commit")]),t._v(" "),a("li",[t._v("merge 分支合并")]),t._v(" "),a("li",[t._v("rebase 变基 or 合并 commit")]),t._v(" "),a("li",[t._v("cherry-pick 摘取指定 commit")]),t._v(" "),a("li",[t._v("git pull == fetch + merge")]),t._v(" "),a("li",[t._v("两种回滚区别：是否生成了一个 revert-commit")])]),t._v(" "),a("h5",{attrs:{id:"参考文章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章：")]),t._v(" "),a("ol",[a("li",[t._v("静思的命令行介绍")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("常用 Git 命令清单"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2014/06/git_remote.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 远程操作详解"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.csdn.net/t949500898/article/details/108572456",target:"_blank",rel:"noopener noreferrer"}},[t._v("rebase 详解——非常精髓"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=r.exports}}]);